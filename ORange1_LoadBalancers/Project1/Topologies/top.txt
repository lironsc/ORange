#!/usr/bin/python

"""
Build a simple network from scratch, using mininet primitives.
This is more complicated than using the higher-level classes,
but it exposes the configuration details and allows customization.

For most tasks, the higher-level API will be preferable.
"""

from mininet.net import Mininet
from mininet.node import Node
from mininet.link import Link
from mininet.log import setLogLevel, info
from mininet.node import RemoteController
from mininet.util import quietRun

from time import sleep

def scratchNet( cname='controller', cargs='-v ptcp:' ):
    "Create network from scratch using Open vSwitch."
    
    numOfServers=4
    numOfClients=10
    totalHosts=numOfServers+numOfClients
    mHosts=[]

    controller = RemoteController

    info( "*** Creating nodes\n" )
    switch = Node( 's0', inNamespace=False )
    
    for i in range(1,totalHosts+1):
        mHosts.append(Node( 'h%d' % i ))

    info('\t\t\t%d Servers\n' % numOfServers)
    info('\t\t\t%d Clients\n' % numOfClients)

    info( "*** Creating links\n" )
    for i in range(0,totalHosts):
        Link(mHosts[i], switch )

    info( "*** Configuring hosts\n" )
    for i in range(1,totalHosts+1):
        subnet='192.168'
        ipGen= numOfServers + i*int(((254-numOfServers)/numOfClients)) if i <= numOfClients else i-numOfClients
        mHosts[i-1].setIP( subnet +('.%d' % ipGen) +('.%d' % ipGen) +"/16")


    info( "*** Starting network using Open vSwitch\n" )
    switch.cmd( 'ovs-vsctl del-br dp0' )
    switch.cmd( 'ovs-vsctl add-br dp0' )
    switch.cmd('sudo ovs-vsctl set bridge dp0 protocols=OpenFlow13')
    for intf in switch.intfs.values():
        switch.cmd( 'ovs-vsctl add-port dp0 %s' % intf )

    # Note: controller and switch are in root namespace, and we
    # can connect via loopback interface
    switch.cmd( 'ovs-vsctl set-controller dp0 tcp:127.0.0.1:6633' )

    #Send pings from all clients so controller can learn their IP address
    info("*** Pinging from all hosts\n")
    end=totalHosts/2 if totalHosts%2==0 else totalHosts/2+1
    for i in range(0,end):
        h= mHosts[i]
        dstIndex= totalHosts-1-i if 2*i != totalHosts-1 else totalHosts-1
        h.cmd('ping -c 1 %s' % mHosts[dstIndex].IP())
    #waitForActionToFinish(mHosts,0,totalHosts)


    info("*** Starting HTTP server on hosts\n")
    for i in range(numOfClients,totalHosts):
       mHosts[i].cmd('python -m SimpleHTTPServer 80 &')

    #Log all servers traffic
    for i in range(numOfClients,totalHosts):
        mHosts[i].cmd('tcpdump -w {0}.pcap -n -i {1}-eth0 &'.format(mHosts[i],mHosts[i]))
    
    waitForActionToFinish(mHosts,totalHosts-numOfClients,totalHosts)

    test1(switch,mHosts,numOfClients)
    #test2(mHosts)
 
    printServersStats(mHosts,numOfClients,totalHosts)

    #info("Going to sleep...")
    #sleep(10000000)
    info( "*** Stopping network\n" )
    switch.cmd( 'ovs-vsctl del-br dp0' )
    switch.deleteIntfs()
    info( '\n' )

def test1(switch,mHosts,numOfClients):
    for i in range(0,1):
        for i in range (0,numOfClients):
            mHosts[i].cmdPrint("wget --tries=1 --timeout=10 %s" % mHosts[len(mHosts)-1].IP())
            sleep(1)
        #sleep(5)

def test2(mHosts):
    mHosts[0].cmdPrint("wget --tries=1 --timeout=15 %s" % mHosts[len(mHosts)-1].IP())

def printServersStats(mHosts,numOfClients,totalHosts):
    #Dump server logs to console
    info("\n\n*** Test results:\n\n")
    for i in range(numOfClients,totalHosts):
        #mHosts[i].cmdPrint('kill tcpdump')
        mHosts[i].cmdPrint('tcpdump -r {0}.pcap &'.format(mHosts[i]))

def waitForActionToFinish(mHosts,start,end):
    sleep(1)
    for i in range(start,end):
        mHosts[i].waitOutput()

if __name__ == '__main__':
    setLogLevel( 'info' )
    Mininet.init()
    scratchNet()